#ifndef _ENUMS_H
#define _ENUMS_H

#include "stdafx.h"
#include "Scintilla.h"
#include "SciLexer.h"

void export_enums();

/* ++Autogenerated ---------------------------------------------- */
enum CaretPolicy
{
	PYSCR_CARET_SLOP = CARET_SLOP,
	PYSCR_CARET_STRICT = CARET_STRICT,
	PYSCR_CARET_JUMPS = CARET_JUMPS,
	PYSCR_CARET_EVEN = CARET_EVEN
};

enum CaseVisible
{
	PYSCR_SC_CASE_MIXED = SC_CASE_MIXED,
	PYSCR_SC_CASE_UPPER = SC_CASE_UPPER,
	PYSCR_SC_CASE_LOWER = SC_CASE_LOWER
};

enum FoldFlag
{
	PYSCR_SC_FOLDFLAG_LINEBEFORE_EXPANDED = SC_FOLDFLAG_LINEBEFORE_EXPANDED,
	PYSCR_SC_FOLDFLAG_LINEBEFORE_CONTRACTED = SC_FOLDFLAG_LINEBEFORE_CONTRACTED,
	PYSCR_SC_FOLDFLAG_LINEAFTER_EXPANDED = SC_FOLDFLAG_LINEAFTER_EXPANDED,
	PYSCR_SC_FOLDFLAG_LINEAFTER_CONTRACTED = SC_FOLDFLAG_LINEAFTER_CONTRACTED,
	PYSCR_SC_FOLDFLAG_LEVELNUMBERS = SC_FOLDFLAG_LEVELNUMBERS
};

enum CaretStyle
{
	PYSCR_CARETSTYLE_INVISIBLE = CARETSTYLE_INVISIBLE,
	PYSCR_CARETSTYLE_LINE = CARETSTYLE_LINE,
	PYSCR_CARETSTYLE_BLOCK = CARETSTYLE_BLOCK
};

enum Status
{
	PYSCR_SC_STATUS_OK = SC_STATUS_OK,
	PYSCR_SC_STATUS_FAILURE = SC_STATUS_FAILURE,
	PYSCR_SC_STATUS_BADALLOC = SC_STATUS_BADALLOC
};

enum WrapVisualLocation
{
	PYSCR_SC_WRAPVISUALFLAGLOC_DEFAULT = SC_WRAPVISUALFLAGLOC_DEFAULT,
	PYSCR_SC_WRAPVISUALFLAGLOC_END_BY_TEXT = SC_WRAPVISUALFLAGLOC_END_BY_TEXT,
	PYSCR_SC_WRAPVISUALFLAGLOC_START_BY_TEXT = SC_WRAPVISUALFLAGLOC_START_BY_TEXT
};

enum Keys
{
	PYSCR_SCK_DOWN = SCK_DOWN,
	PYSCR_SCK_UP = SCK_UP,
	PYSCR_SCK_LEFT = SCK_LEFT,
	PYSCR_SCK_RIGHT = SCK_RIGHT,
	PYSCR_SCK_HOME = SCK_HOME,
	PYSCR_SCK_END = SCK_END,
	PYSCR_SCK_PRIOR = SCK_PRIOR,
	PYSCR_SCK_NEXT = SCK_NEXT,
	PYSCR_SCK_DELETE = SCK_DELETE,
	PYSCR_SCK_INSERT = SCK_INSERT,
	PYSCR_SCK_ESCAPE = SCK_ESCAPE,
	PYSCR_SCK_BACK = SCK_BACK,
	PYSCR_SCK_TAB = SCK_TAB,
	PYSCR_SCK_RETURN = SCK_RETURN,
	PYSCR_SCK_ADD = SCK_ADD,
	PYSCR_SCK_SUBTRACT = SCK_SUBTRACT,
	PYSCR_SCK_DIVIDE = SCK_DIVIDE,
	PYSCR_SCK_WIN = SCK_WIN,
	PYSCR_SCK_RWIN = SCK_RWIN,
	PYSCR_SCK_MENU = SCK_MENU
};

enum KeyMod
{
	PYSCR_SCMOD_NORM = SCMOD_NORM,
	PYSCR_SCMOD_SHIFT = SCMOD_SHIFT,
	PYSCR_SCMOD_CTRL = SCMOD_CTRL,
	PYSCR_SCMOD_ALT = SCMOD_ALT,
	PYSCR_SCMOD_SUPER = SCMOD_SUPER
};

enum AnnotationVisible
{
	PYSCR_ANNOTATION_HIDDEN = ANNOTATION_HIDDEN,
	PYSCR_ANNOTATION_STANDARD = ANNOTATION_STANDARD,
	PYSCR_ANNOTATION_BOXED = ANNOTATION_BOXED
};

enum CharacterSet
{
	PYSCR_SC_CHARSET_ANSI = SC_CHARSET_ANSI,
	PYSCR_SC_CHARSET_DEFAULT = SC_CHARSET_DEFAULT,
	PYSCR_SC_CHARSET_BALTIC = SC_CHARSET_BALTIC,
	PYSCR_SC_CHARSET_CHINESEBIG5 = SC_CHARSET_CHINESEBIG5,
	PYSCR_SC_CHARSET_EASTEUROPE = SC_CHARSET_EASTEUROPE,
	PYSCR_SC_CHARSET_GB2312 = SC_CHARSET_GB2312,
	PYSCR_SC_CHARSET_GREEK = SC_CHARSET_GREEK,
	PYSCR_SC_CHARSET_HANGUL = SC_CHARSET_HANGUL,
	PYSCR_SC_CHARSET_MAC = SC_CHARSET_MAC,
	PYSCR_SC_CHARSET_OEM = SC_CHARSET_OEM,
	PYSCR_SC_CHARSET_RUSSIAN = SC_CHARSET_RUSSIAN,
	PYSCR_SC_CHARSET_CYRILLIC = SC_CHARSET_CYRILLIC,
	PYSCR_SC_CHARSET_SHIFTJIS = SC_CHARSET_SHIFTJIS,
	PYSCR_SC_CHARSET_SYMBOL = SC_CHARSET_SYMBOL,
	PYSCR_SC_CHARSET_TURKISH = SC_CHARSET_TURKISH,
	PYSCR_SC_CHARSET_JOHAB = SC_CHARSET_JOHAB,
	PYSCR_SC_CHARSET_HEBREW = SC_CHARSET_HEBREW,
	PYSCR_SC_CHARSET_ARABIC = SC_CHARSET_ARABIC,
	PYSCR_SC_CHARSET_VIETNAMESE = SC_CHARSET_VIETNAMESE,
	PYSCR_SC_CHARSET_THAI = SC_CHARSET_THAI,
	PYSCR_SC_CHARSET_8859_15 = SC_CHARSET_8859_15
};

enum PrintOption
{
	PYSCR_SC_PRINT_NORMAL = SC_PRINT_NORMAL,
	PYSCR_SC_PRINT_INVERTLIGHT = SC_PRINT_INVERTLIGHT,
	PYSCR_SC_PRINT_BLACKONWHITE = SC_PRINT_BLACKONWHITE,
	PYSCR_SC_PRINT_COLOURONWHITE = SC_PRINT_COLOURONWHITE,
	PYSCR_SC_PRINT_COLOURONWHITEDEFAULTBG = SC_PRINT_COLOURONWHITEDEFAULTBG
};

enum MarkerSymbol
{
	PYSCR_SC_MARK_CIRCLE = SC_MARK_CIRCLE,
	PYSCR_SC_MARK_ROUNDRECT = SC_MARK_ROUNDRECT,
	PYSCR_SC_MARK_ARROW = SC_MARK_ARROW,
	PYSCR_SC_MARK_SMALLRECT = SC_MARK_SMALLRECT,
	PYSCR_SC_MARK_SHORTARROW = SC_MARK_SHORTARROW,
	PYSCR_SC_MARK_EMPTY = SC_MARK_EMPTY,
	PYSCR_SC_MARK_ARROWDOWN = SC_MARK_ARROWDOWN,
	PYSCR_SC_MARK_MINUS = SC_MARK_MINUS,
	PYSCR_SC_MARK_PLUS = SC_MARK_PLUS,
	PYSCR_SC_MARK_VLINE = SC_MARK_VLINE,
	PYSCR_SC_MARK_LCORNER = SC_MARK_LCORNER,
	PYSCR_SC_MARK_TCORNER = SC_MARK_TCORNER,
	PYSCR_SC_MARK_BOXPLUS = SC_MARK_BOXPLUS,
	PYSCR_SC_MARK_BOXPLUSCONNECTED = SC_MARK_BOXPLUSCONNECTED,
	PYSCR_SC_MARK_BOXMINUS = SC_MARK_BOXMINUS,
	PYSCR_SC_MARK_BOXMINUSCONNECTED = SC_MARK_BOXMINUSCONNECTED,
	PYSCR_SC_MARK_LCORNERCURVE = SC_MARK_LCORNERCURVE,
	PYSCR_SC_MARK_TCORNERCURVE = SC_MARK_TCORNERCURVE,
	PYSCR_SC_MARK_CIRCLEPLUS = SC_MARK_CIRCLEPLUS,
	PYSCR_SC_MARK_CIRCLEPLUSCONNECTED = SC_MARK_CIRCLEPLUSCONNECTED,
	PYSCR_SC_MARK_CIRCLEMINUS = SC_MARK_CIRCLEMINUS,
	PYSCR_SC_MARK_CIRCLEMINUSCONNECTED = SC_MARK_CIRCLEMINUSCONNECTED,
	PYSCR_SC_MARK_BACKGROUND = SC_MARK_BACKGROUND,
	PYSCR_SC_MARK_DOTDOTDOT = SC_MARK_DOTDOTDOT,
	PYSCR_SC_MARK_ARROWS = SC_MARK_ARROWS,
	PYSCR_SC_MARK_PIXMAP = SC_MARK_PIXMAP,
	PYSCR_SC_MARK_FULLRECT = SC_MARK_FULLRECT,
	PYSCR_SC_MARK_LEFTRECT = SC_MARK_LEFTRECT,
	PYSCR_SC_MARK_AVAILABLE = SC_MARK_AVAILABLE,
	PYSCR_SC_MARK_UNDERLINE = SC_MARK_UNDERLINE,
	PYSCR_SC_MARK_CHARACTER = SC_MARK_CHARACTER
};

enum IndicatorStyle
{
	PYSCR_INDIC_PLAIN = INDIC_PLAIN,
	PYSCR_INDIC_SQUIGGLE = INDIC_SQUIGGLE,
	PYSCR_INDIC_TT = INDIC_TT,
	PYSCR_INDIC_DIAGONAL = INDIC_DIAGONAL,
	PYSCR_INDIC_STRIKE = INDIC_STRIKE,
	PYSCR_INDIC_HIDDEN = INDIC_HIDDEN,
	PYSCR_INDIC_BOX = INDIC_BOX,
	PYSCR_INDIC_ROUNDBOX = INDIC_ROUNDBOX,
	PYSCR_INDIC_MAX = INDIC_MAX,
	PYSCR_INDIC_CONTAINER = INDIC_CONTAINER
};

enum WrapVisualFlag
{
	PYSCR_SC_WRAPVISUALFLAG_NONE = SC_WRAPVISUALFLAG_NONE,
	PYSCR_SC_WRAPVISUALFLAG_END = SC_WRAPVISUALFLAG_END,
	PYSCR_SC_WRAPVISUALFLAG_START = SC_WRAPVISUALFLAG_START
};

enum Lexer
{
	PYSCR_SCLEX_CONTAINER = SCLEX_CONTAINER,
	PYSCR_SCLEX_NULL = SCLEX_NULL,
	PYSCR_SCLEX_PYTHON = SCLEX_PYTHON,
	PYSCR_SCLEX_CPP = SCLEX_CPP,
	PYSCR_SCLEX_HTML = SCLEX_HTML,
	PYSCR_SCLEX_XML = SCLEX_XML,
	PYSCR_SCLEX_PERL = SCLEX_PERL,
	PYSCR_SCLEX_SQL = SCLEX_SQL,
	PYSCR_SCLEX_VB = SCLEX_VB,
	PYSCR_SCLEX_PROPERTIES = SCLEX_PROPERTIES,
	PYSCR_SCLEX_ERRORLIST = SCLEX_ERRORLIST,
	PYSCR_SCLEX_MAKEFILE = SCLEX_MAKEFILE,
	PYSCR_SCLEX_BATCH = SCLEX_BATCH,
	PYSCR_SCLEX_XCODE = SCLEX_XCODE,
	PYSCR_SCLEX_LATEX = SCLEX_LATEX,
	PYSCR_SCLEX_LUA = SCLEX_LUA,
	PYSCR_SCLEX_DIFF = SCLEX_DIFF,
	PYSCR_SCLEX_CONF = SCLEX_CONF,
	PYSCR_SCLEX_PASCAL = SCLEX_PASCAL,
	PYSCR_SCLEX_AVE = SCLEX_AVE,
	PYSCR_SCLEX_ADA = SCLEX_ADA,
	PYSCR_SCLEX_LISP = SCLEX_LISP,
	PYSCR_SCLEX_RUBY = SCLEX_RUBY,
	PYSCR_SCLEX_EIFFEL = SCLEX_EIFFEL,
	PYSCR_SCLEX_EIFFELKW = SCLEX_EIFFELKW,
	PYSCR_SCLEX_TCL = SCLEX_TCL,
	PYSCR_SCLEX_NNCRONTAB = SCLEX_NNCRONTAB,
	PYSCR_SCLEX_BULLANT = SCLEX_BULLANT,
	PYSCR_SCLEX_VBSCRIPT = SCLEX_VBSCRIPT,
	PYSCR_SCLEX_BAAN = SCLEX_BAAN,
	PYSCR_SCLEX_MATLAB = SCLEX_MATLAB,
	PYSCR_SCLEX_SCRIPTOL = SCLEX_SCRIPTOL,
	PYSCR_SCLEX_ASM = SCLEX_ASM,
	PYSCR_SCLEX_CPPNOCASE = SCLEX_CPPNOCASE,
	PYSCR_SCLEX_FORTRAN = SCLEX_FORTRAN,
	PYSCR_SCLEX_F77 = SCLEX_F77,
	PYSCR_SCLEX_CSS = SCLEX_CSS,
	PYSCR_SCLEX_POV = SCLEX_POV,
	PYSCR_SCLEX_LOUT = SCLEX_LOUT,
	PYSCR_SCLEX_ESCRIPT = SCLEX_ESCRIPT,
	PYSCR_SCLEX_PS = SCLEX_PS,
	PYSCR_SCLEX_NSIS = SCLEX_NSIS,
	PYSCR_SCLEX_MMIXAL = SCLEX_MMIXAL,
	PYSCR_SCLEX_CLW = SCLEX_CLW,
	PYSCR_SCLEX_CLWNOCASE = SCLEX_CLWNOCASE,
	PYSCR_SCLEX_LOT = SCLEX_LOT,
	PYSCR_SCLEX_YAML = SCLEX_YAML,
	PYSCR_SCLEX_TEX = SCLEX_TEX,
	PYSCR_SCLEX_METAPOST = SCLEX_METAPOST,
	PYSCR_SCLEX_POWERBASIC = SCLEX_POWERBASIC,
	PYSCR_SCLEX_FORTH = SCLEX_FORTH,
	PYSCR_SCLEX_ERLANG = SCLEX_ERLANG,
	PYSCR_SCLEX_OCTAVE = SCLEX_OCTAVE,
	PYSCR_SCLEX_MSSQL = SCLEX_MSSQL,
	PYSCR_SCLEX_VERILOG = SCLEX_VERILOG,
	PYSCR_SCLEX_KIX = SCLEX_KIX,
	PYSCR_SCLEX_GUI4CLI = SCLEX_GUI4CLI,
	PYSCR_SCLEX_SPECMAN = SCLEX_SPECMAN,
	PYSCR_SCLEX_AU3 = SCLEX_AU3,
	PYSCR_SCLEX_APDL = SCLEX_APDL,
	PYSCR_SCLEX_BASH = SCLEX_BASH,
	PYSCR_SCLEX_ASN1 = SCLEX_ASN1,
	PYSCR_SCLEX_VHDL = SCLEX_VHDL,
	PYSCR_SCLEX_CAML = SCLEX_CAML,
	PYSCR_SCLEX_BLITZBASIC = SCLEX_BLITZBASIC,
	PYSCR_SCLEX_PUREBASIC = SCLEX_PUREBASIC,
	PYSCR_SCLEX_HASKELL = SCLEX_HASKELL,
	PYSCR_SCLEX_PHPSCRIPT = SCLEX_PHPSCRIPT,
	PYSCR_SCLEX_TADS3 = SCLEX_TADS3,
	PYSCR_SCLEX_REBOL = SCLEX_REBOL,
	PYSCR_SCLEX_SMALLTALK = SCLEX_SMALLTALK,
	PYSCR_SCLEX_FLAGSHIP = SCLEX_FLAGSHIP,
	PYSCR_SCLEX_CSOUND = SCLEX_CSOUND,
	PYSCR_SCLEX_FREEBASIC = SCLEX_FREEBASIC,
	PYSCR_SCLEX_INNOSETUP = SCLEX_INNOSETUP,
	PYSCR_SCLEX_OPAL = SCLEX_OPAL,
	PYSCR_SCLEX_SPICE = SCLEX_SPICE,
	PYSCR_SCLEX_D = SCLEX_D,
	PYSCR_SCLEX_CMAKE = SCLEX_CMAKE,
	PYSCR_SCLEX_GAP = SCLEX_GAP,
	PYSCR_SCLEX_PLM = SCLEX_PLM,
	PYSCR_SCLEX_PROGRESS = SCLEX_PROGRESS,
	PYSCR_SCLEX_ABAQUS = SCLEX_ABAQUS,
	PYSCR_SCLEX_ASYMPTOTE = SCLEX_ASYMPTOTE,
	PYSCR_SCLEX_R = SCLEX_R,
	PYSCR_SCLEX_MAGIK = SCLEX_MAGIK,
	PYSCR_SCLEX_POWERSHELL = SCLEX_POWERSHELL,
	PYSCR_SCLEX_MYSQL = SCLEX_MYSQL,
	PYSCR_SCLEX_PO = SCLEX_PO,
	PYSCR_SCLEX_TAL = SCLEX_TAL,
	PYSCR_SCLEX_COBOL = SCLEX_COBOL,
	PYSCR_SCLEX_TACL = SCLEX_TACL,
	PYSCR_SCLEX_SORCUS = SCLEX_SORCUS,
	PYSCR_SCLEX_POWERPRO = SCLEX_POWERPRO,
	PYSCR_SCLEX_NIMROD = SCLEX_NIMROD,
	PYSCR_SCLEX_SML = SCLEX_SML,
	PYSCR_SCLEX_MARKDOWN = SCLEX_MARKDOWN,
	PYSCR_SCLEX_AUTOMATIC = SCLEX_AUTOMATIC
};

enum CursorShape
{
	PYSCR_SC_CURSORNORMAL = SC_CURSORNORMAL,
	PYSCR_SC_CURSORWAIT = SC_CURSORWAIT
};

enum MarginType
{
	PYSCR_SC_MARGIN_SYMBOL = SC_MARGIN_SYMBOL,
	PYSCR_SC_MARGIN_NUMBER = SC_MARGIN_NUMBER,
	PYSCR_SC_MARGIN_BACK = SC_MARGIN_BACK,
	PYSCR_SC_MARGIN_FORE = SC_MARGIN_FORE,
	PYSCR_SC_MARGIN_TEXT = SC_MARGIN_TEXT,
	PYSCR_SC_MARGIN_RTEXT = SC_MARGIN_RTEXT
};

enum FindOption
{
	PYSCR_SCFIND_WHOLEWORD = SCFIND_WHOLEWORD,
	PYSCR_SCFIND_MATCHCASE = SCFIND_MATCHCASE,
	PYSCR_SCFIND_WORDSTART = SCFIND_WORDSTART,
	PYSCR_SCFIND_REGEXP = SCFIND_REGEXP,
	PYSCR_SCFIND_POSIX = SCFIND_POSIX
};

enum VirtualSpace
{
	PYSCR_SCVS_NONE = SCVS_NONE,
	PYSCR_SCVS_RECTANGULARSELECTION = SCVS_RECTANGULARSELECTION,
	PYSCR_SCVS_USERACCESSIBLE = SCVS_USERACCESSIBLE
};

enum EdgeVisualStyle
{
	PYSCR_EDGE_NONE = EDGE_NONE,
	PYSCR_EDGE_LINE = EDGE_LINE,
	PYSCR_EDGE_BACKGROUND = EDGE_BACKGROUND
};

enum WhiteSpace
{
	PYSCR_SCWS_INVISIBLE = SCWS_INVISIBLE,
	PYSCR_SCWS_VISIBLEALWAYS = SCWS_VISIBLEALWAYS,
	PYSCR_SCWS_VISIBLEAFTERINDENT = SCWS_VISIBLEAFTERINDENT
};

enum MarkerOutline
{
	PYSCR_SC_MARKNUM_FOLDEREND = SC_MARKNUM_FOLDEREND,
	PYSCR_SC_MARKNUM_FOLDEROPENMID = SC_MARKNUM_FOLDEROPENMID,
	PYSCR_SC_MARKNUM_FOLDERMIDTAIL = SC_MARKNUM_FOLDERMIDTAIL,
	PYSCR_SC_MARKNUM_FOLDERTAIL = SC_MARKNUM_FOLDERTAIL,
	PYSCR_SC_MARKNUM_FOLDERSUB = SC_MARKNUM_FOLDERSUB,
	PYSCR_SC_MARKNUM_FOLDER = SC_MARKNUM_FOLDER,
	PYSCR_SC_MARKNUM_FOLDEROPEN = SC_MARKNUM_FOLDEROPEN
};

enum FoldLevel
{
	PYSCR_SC_FOLDLEVELBASE = SC_FOLDLEVELBASE,
	PYSCR_SC_FOLDLEVELWHITEFLAG = SC_FOLDLEVELWHITEFLAG,
	PYSCR_SC_FOLDLEVELHEADERFLAG = SC_FOLDLEVELHEADERFLAG,
	PYSCR_SC_FOLDLEVELNUMBERMASK = SC_FOLDLEVELNUMBERMASK
};

enum WrapIndentMode
{
	PYSCR_SC_WRAPINDENT_FIXED = SC_WRAPINDENT_FIXED,
	PYSCR_SC_WRAPINDENT_SAME = SC_WRAPINDENT_SAME,
	PYSCR_SC_WRAPINDENT_INDENT = SC_WRAPINDENT_INDENT
};

enum LineCache
{
	PYSCR_SC_CACHE_NONE = SC_CACHE_NONE,
	PYSCR_SC_CACHE_CARET = SC_CACHE_CARET,
	PYSCR_SC_CACHE_PAGE = SC_CACHE_PAGE,
	PYSCR_SC_CACHE_DOCUMENT = SC_CACHE_DOCUMENT
};

enum MultiPaste
{
	PYSCR_SC_MULTIPASTE_ONCE = SC_MULTIPASTE_ONCE,
	PYSCR_SC_MULTIPASTE_EACH = SC_MULTIPASTE_EACH
};

enum StylesCommon
{
	PYSCR_STYLE_DEFAULT = STYLE_DEFAULT,
	PYSCR_STYLE_LINENUMBER = STYLE_LINENUMBER,
	PYSCR_STYLE_BRACELIGHT = STYLE_BRACELIGHT,
	PYSCR_STYLE_BRACEBAD = STYLE_BRACEBAD,
	PYSCR_STYLE_CONTROLCHAR = STYLE_CONTROLCHAR,
	PYSCR_STYLE_INDENTGUIDE = STYLE_INDENTGUIDE,
	PYSCR_STYLE_CALLTIP = STYLE_CALLTIP,
	PYSCR_STYLE_LASTPREDEFINED = STYLE_LASTPREDEFINED,
	PYSCR_STYLE_MAX = STYLE_MAX
};

enum IndentView
{
	PYSCR_SC_IV_NONE = SC_IV_NONE,
	PYSCR_SC_IV_REAL = SC_IV_REAL,
	PYSCR_SC_IV_LOOKFORWARD = SC_IV_LOOKFORWARD,
	PYSCR_SC_IV_LOOKBOTH = SC_IV_LOOKBOTH
};

enum Wrap
{
	PYSCR_SC_WRAP_NONE = SC_WRAP_NONE,
	PYSCR_SC_WRAP_WORD = SC_WRAP_WORD,
	PYSCR_SC_WRAP_CHAR = SC_WRAP_CHAR
};

enum SelectionMode
{
	PYSCR_SC_SEL_STREAM = SC_SEL_STREAM,
	PYSCR_SC_SEL_RECTANGLE = SC_SEL_RECTANGLE,
	PYSCR_SC_SEL_LINES = SC_SEL_LINES,
	PYSCR_SC_SEL_THIN = SC_SEL_THIN
};

enum FontQuality
{
	PYSCR_SC_EFF_QUALITY_MASK = SC_EFF_QUALITY_MASK,
	PYSCR_SC_EFF_QUALITY_DEFAULT = SC_EFF_QUALITY_DEFAULT,
	PYSCR_SC_EFF_QUALITY_NON_ANTIALIASED = SC_EFF_QUALITY_NON_ANTIALIASED,
	PYSCR_SC_EFF_QUALITY_ANTIALIASED = SC_EFF_QUALITY_ANTIALIASED,
	PYSCR_SC_EFF_QUALITY_LCD_OPTIMIZED = SC_EFF_QUALITY_LCD_OPTIMIZED
};

enum EndOfLine
{
	PYSCR_SC_EOL_CRLF = SC_EOL_CRLF,
	PYSCR_SC_EOL_CR = SC_EOL_CR,
	PYSCR_SC_EOL_LF = SC_EOL_LF
};

	/* --Autogenerated ---------------------------------------------- */
#endif
